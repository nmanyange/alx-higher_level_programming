The ``0-add_integer`` module
=================================

#!/usr/bin/python3
"""Test cases for the add_integer function."""

class TestAddIntegerFunction:

    def __init__(self):
        self.run_tests()

    def assert_equal(self, result, expected):
        assert result == expected, f"Expected {expected}, but got {result}"

    def test_add_integer_with_integers(self):
        result = add_integer(3, 5)
        self.assert_equal(result, 8)

    def test_add_integer_with_floats(self):
        result = add_integer(3.5, 5.5)
        self.assert_equal(result, 8)

    def test_add_integer_with_mixed_types(self):
        result = add_integer(3, 5.5)
        self.assert_equal(result, 8)

    def test_add_integer_with_default_value(self):
        result = add_integer(3)
        self.assert_equal(result, 101)

    def test_add_integer_with_non_numeric_a(self):
        try:
            add_integer("3", 5)
        except TypeError as e:
            assert str(e) == "a must be an integer or a float", f"Unexpected error message: {e}"

    def test_add_integer_with_non_numeric_b(self):
        try:
            add_integer(3, "5")
        except TypeError as e:
            assert str(e) == "b must be an integer or a float", f"Unexpected error message: {e}"

# Create an instance of the test class to run the tests
TestAddIntegerFunction()

